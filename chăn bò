import math

se = set()
for i in range(int(input())):
    x, y = map(int, input().split())
    ucln = math.gcd(x, y)
    x //= ucln
    y //= ucln
    se.add((x, y))
print(len(se))



Đoạn mã trên triển khai một thuật toán để đếm số lượng điểm duy nhất trên mặt phẳng, sau khi đã được chuẩn hóa bằng cách chia tọa độ (x, y) của mỗi điểm cho ước chung lớn nhất (UCLN) của chúng. Dưới đây là mô tả chi tiết của thuật toán:

Khởi tạo một tập hợp (set) rỗng se để lưu trữ các điểm duy nhất sau khi chuẩn hóa.

Đọc một số nguyên từ input đại diện cho số lượng điểm.

Lặp qua số lượng điểm và thực hiện các bước sau:
a. Đọc cặp giá trị x và y từ input, tương ứng với tọa độ của một điểm trên mặt phẳng.
b. Sử dụng hàm math.gcd(x, y) để tính ước chung lớn nhất (UCLN) của x và y.
c. Chia x và y cho UCLN để chuẩn hóa điểm. Điều này đảm bảo rằng x và y không có ước chung lớn nhất và được biểu diễn bởi một cặp số nguyên tương đối nguyên tố.
d. Thêm cặp (x, y) vào tập hợp se.

In ra độ dài của tập hợp se, đó chính là số lượng điểm duy nhất sau khi chuẩn hóa.

Thuật toán này thực hiện chuẩn hóa các điểm trên mặt phẳng bằng cách chia tọa độ (x, y) của mỗi điểm cho ước chung lớn nhất (UCLN) của chúng. Sau đó, sử dụng tập hợp set để lưu trữ các điểm duy nhất sau khi chuẩn hóa. Cuối cùng, in ra số lượng điểm duy nhất trong tập hợp.

Ví dụ:
Input:

basic
Copier
5
1 1
2 2
3 1
4 3
6 2
Output:

Copier
4
Trong ví dụ này, có 5 điểm trên mặt phẳng với tọa độ (1, 1), (2, 2), (3, 1), (4, 3), (6, 2). Sau khi chuẩn hóa, các điểm trở thành (1, 1), (1, 1), (3, 1), (4, 3), (3, 1). Có tổng cộng 4 điểm duy nhất trong tập hợp.
