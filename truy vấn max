import collections
import math
import queue
import math

class node:
    def __init__(self, a, b):
        self.a, self.b = a, b
        self.elem = -1000000000
        if a + 1 == b:
            self.left = None
            self.right = None
        else:
            self.left = node(a, (a + b) // 2)
            self.right = node((a + b) // 2, b)


def update(H, i, x):
    if H.elem < x:
        H.elem = x
    if H.left != None:
        update(H.left if i < H.left.b else H.right, i, x)


def get(H, L, R):
    if H.a == L and H.b == R:
        return H.elem
    if R <= H.left.b:
        return get(H.left, L, R)
    if L >= H.right.a:
        return get(H.right, L, R)
    return max(get(H.left, L, H.left.b), get(H.right, H.right.a, R))


def Print(H, p=""):
    if H == None:
        return
    Print(H.left, p + "\t\t")
    print("%s(%d,%d):%d" % (p, H.a, H.b, H.elem))
    Print(H.right, p + "\t\t")


if __name__ == '__main__':
    n, m = map(int, input().split())
    root = node(1, n + 1)
    for i, x in enumerate(list(map(int, input().split())), 1):
        update(root, i, x)
    for i in range(m):
        L, R = map(int, input().split())
        print(get(root, L, R + 1))




Dưới đây là mô tả chi tiết của thuật toán:

Import các module collections, math, và queue.

Định nghĩa một lớp node để biểu diễn mỗi nút trong cây phân đoạn. Mỗi nút chứa các thuộc tính sau:

a, b: đại diện cho đoạn con mà nút này đại diện (cận trên a, cận dưới b).
elem: giá trị lớn nhất trong đoạn con mà nút này đại diện.
left, right: con trái và con phải của nút (cũng là các đối tượng node).
Định nghĩa hàm update(H, i, x) để cập nhật giá trị của nút H và các nút con của nó. Nếu x lớn hơn giá trị hiện tại của nút H, thì giá trị của H.elem được cập nhật. Nếu H có các nút con (H.left và H.right), thì hàm sẽ gọi đệ quy để cập nhật nút con phù hợp.

Định nghĩa hàm get(H, L, R) để truy vấn và trả về giá trị lớn nhất trong đoạn con [L, R] mà nút H đại diện. Nếu đoạn con mà nút H đại diện chính là đoạn con cần truy vấn (H.a == L và H.b == R), thì trả về giá trị của H.elem. Nếu đoạn con cần truy vấn nằm hoàn toàn bên trái của nút con trái của H (R <= H.left.b), thì gọi đệ quy với nút con trái của H (H.left). Tương tự, nếu đoạn con cần truy vấn nằm hoàn toàn bên phải của nút con phải của H (L >= H.right.a), thì gọi đệ quy với nút con phải của H (H.right). Trong trường hợp còn lại, gọi đệ quy với nút con trái và nút con phải của H, và trả về giá trị lớn nhất từ hai kết quả đệ quy.

Định nghĩa hàm Print(H, p="") để in ra cây phân đoạn theo thứ tự trung tự. Hàm này sử dụng đệ quy để in các nút con trái, nút hiện tại, và nút con phải của H.

Trong phần chính của chương trình (if __name__ == '__main__':), đọc hai số nguyên n và m từ input. n đại diện cho số phần tử trong mảng số nguyên, và m đại diện cho số lượng truy vấn cần thực hiện.

Tạo nút gốc root của cây phân đoạn với đoạn con từ 1 đến n+1.

Đọc n số nguyên từ input và gọi hàm update để cập nhật giá trị của các nút trong cây phân đoạn.

Lặp m lần và thực hiện các bước sau:
a. Đọctiếp theo...

Lặp m lần và thực hiện các bước sau:
a. Đọc cặp số nguyên L và R từ input. Đây là đoạn con cần truy vấn giá trị lớn nhất.
b. Gọi hàm get với nút gốc root và đoạn con [L, R + 1] để truy vấn giá trị lớn nhất.
c. In ra giá trị lớn nhất tìm được.

Thuật toán này sử dụng cây phân đoạn để tìm giá trị lớn nhất trong các đoạn con của một mảng số nguyên. 
Cây phân đoạn được xây dựng ban đầu với một đoạn con toàn bộ mảng và giá trị lớn nhất của từng nút là giá trị của phần tử tương ứng trong mảng. 
Sau đó, các truy vấn được thực hiện bằng cách tìm kiếm và trả về giá trị lớn nhất trong đoạn con được chỉ định trong mỗi truy vấn.

Ví dụ:
Input:

basic
Copier
5 3
1 2 3 4 5
1 3
2 4
3 5
Output:

Copier
3
4
5
Trong ví dụ này, mảng số nguyên ban đầu là [1, 2, 3, 4, 5].
Cây phân đoạn được xây dựng và cập nhật giá trị của các nút tương ứng với các phần tử trong mảng. 
Các truy vấn được thực hiện để tìm giá trị lớn nhất trong các đoạn con [1, 3], [2, 4], và [3, 5], và kết quả tương ứng là 3, 4, và 5.
